###############################################################################
# <copyright>
#
# IBM Confidential
# OCO Source Materials
# (C) Copyright IBM Corp. 2013, 2015 All Rights Reserved
# The source code for this program is not published or otherwise
# divested of its trade secrets, irrespective of what has
# been deposited with the U.S. Copyright Office.
#
#
# Contributors:
# IBM Corporation - initial API and implementation
# yyyymmdd bug           Email and other contact information
# -------- ------------- -----------------------------------------------------------
# 20130201 107084        Jonathan West (jgwest@ca.ibm.com)
# 20130219 RTC 101682    kchong@ca.ibm.com - Add Support for DDE based editors for supporting custom web services bindings
# 20130704 RTC 115337    kchong@ca.ibm.com - Keith Chong, Show cascade menu on JAX-WS service has three Deployment Descriptor actions
# 20150722        178734 kchong@ca.ibm.com - Enable JAX-WS web service generation into OSGi bundles in WDT via the Web Services Wizard
# 20151005        190448 kchong@ca.ibm.com - Add WDT tooling support for SAML (Liberty)
#
# </copyright>
###############################################################################
# NLS_MESSAGEFORMAT_NONE
# NLS_ENCODING=UTF-8


#Template Descriptions
PolicyTemplateRegistry_UsernameTokenwithPasswordHashoverSSL_Name=UsernameToken with password digest (HashPassword) and timestamp over SSL
PolicyTemplateRegistry_UsernameTokenwithPasswordHashoverSSL_Description=This policy requires that you protect the message with HTTPS, and that a UsernameToken is used for authentication. The UsernameToken password is hashed with the created timestamp and nonce. There is also a message Timestamp.\n\nTo validate the UsernameToken in the Liberty server, you must provide a password callback handler class on the provider side by setting the ws-security.callback-handler attribute. The password from the callback handler must match the password that is used in the PasswordDigest. The password must also match the password in the user registry in the Liberty server.

PolicyTemplateRegistry_UsernameTokenwithPasswordTextoverSSL_Name=UsernameToken with password text, nonce, and created timestamp over SSL
PolicyTemplateRegistry_UsernameTokenwithPasswordTextoverSSL_Description=This policy requires that you protect the message with HTTPS, and that a UsernameToken is used for authentication. The user password within the UsernameToken is sent as clear text, and a timestamp and nonce are included. There is also a message Timestamp. You can modify this policy to remove the requirement of nonce and timestamp. For testing purposes, you can also remove the TransportBinding to send the UsernameToken over HTTP for simplicity.

PolicyTemplateRegistry_UsernameTokenAsEndorsingAndX509Symmetric_Name=UsernameToken as an EndorsingToken and an X509Token symmetric for message protection
PolicyTemplateRegistry_UsernameTokenAsEndorsingAndX509Symmetric_Description=With X509Token symmetric protection, an ephemeral key is created to sign and encrypt the message. The ephemeral key is encrypted using the receiver's public certificate. A UsernameToken with derived keys is used for authentication. The message signature is signed using the UsernameToken's derived key. There is also a message Timestamp.\n\nThis policy template can be used if HTTP transport is not supported, the service has an X509 token and supports a UsernameToken, and the service requires the client to endorse the message.

PolicyTemplateRegistry_X509AsymmetricMutualAndUntAuthentication_Name=UsernameToken with X509Token asymmetric message protection (mutual authentication)
PolicyTemplateRegistry_X509AsymmetricMutualAndUntAuthentication_Description=An X509Token with issuer/serial representation of the sender's public certificate is included in the message. The UsernameToken in the request and the SOAP body in the request and response are signed and encrypted with X509Token asymmetric message protection. There is also a message timestamp and signature confirmation. A UsernameToken with clear text password is used for authentication.\n\nThis policy template is best used if the client must authenticate itself to the service with both an X509 client certificate and a UsernameToken.


PolicyTemplateRegistry_X509SymmetricAndEndorsing_Name=Client X509Token as an EndorsingToken and a server X509Token symmetric for message protection
PolicyTemplateRegistry_X509SymmetricAndEndorsing_Description=The client and server X509 certificates are used for mutual authentication and message protection. With X509Token symmetric protection, an ephemeral key is created to sign and encrypt the message. The ephemeral key is encrypted using the receiver's public certificate. An X509Token with the thumbprint representation of the client's public certificate is included in the message. The message signature is signed using the client's private key.\n\nThis policy template is best used if the client must authenticate itself to the service with both an X509 client certificate and a UsernameToken.

PolicyTemplateRegistry_X509SymmetricForMessageAndUntForClient_Name=UsernameToken authentication and X509Token symmetric for message protection
PolicyTemplateRegistry_X509SymmetricForMessageAndUntForClient_Description=A UsernameToken with clear text password is used for authentication. The UsernameToken in the request and the SOAP body in the request and response are signed and encrypted with X509Token symmetric message protection. There is also a message Timestamp.\n\nWith X509Token symmetric protection, an ephemeral key is created to sign and encrypt the message. The ephemeral key is encrypted using the receiver's public certificate.\n\nIn this sample, the token reference is using a RequireThumbprintReference. You can change the policy to use a RequireIssuerSerialReference or RequireKeyIdentifierReference. You can also modify this policy to use derived keys from an ephemeral key to secure the message exchange by adding an <sp:RequireDerivedKeys/> assertion.\n\nThis policy template is best used if the client can use only a UsernameToken to authenticate itself, and if the message exchange must be signed and encrypted.

PolicyTemplateRegistry_UsernameTokenOverHTTP_Name=UsernameToken with password text, nonce, and created timestamp over HTTP
PolicyTemplateRegistry_UsernameTokenOverHTTP_Desc=This policy requires that a client must send a UsernameToken with clear text password, nonce and  created timestamp, and transport security is not required.\n\nThis simple policy is only suitable if password confidentiality is not a concern or is provided by other means, and could be used in a pre-production environment for testing purpose.

PolicyTemplateRegistry_SamlTokenOverSSL_Name=SamlToken as SupportingToken over SSL
PolicyTemplateRegistry_SamlTokenOverSSL_Description=This policy requires that you protect the message with HTTPS, and that a SAML 2.0 token is used for authentication.

PolicyTemplateRegistry_SamlTokenWithX509AsymmetricMessageProtection_Name=SamlToken with X509Token asymmetric message protection (mutual authentication)
PolicyTemplateRegistry_SamlTokenWithX509AsymmetricMessageProtection_Description=An X509Token with issuer/serial representation of the sender's public certificate is included in the message.  The SAML token in the request and the SOAP body in the request and response are signed and encrypted with X509Token asymmetric message protection. There is also a message Timestamp and signature confirmation. A SAML 2.0 token is used for authentication. This policy template is best used if the client must authenticate itself to the service with both an X509 client certificate and a SAML token.

PolicyTemplateRegistry_SamlTokenWithX509AsymmetricMessageSignature_Name=SamlToken with X509Token asymmetric for message signature
PolicyTemplateRegistry_SamlTokenWithX509AsymmetricMessageSignature_Description=An X509Token with the sender's public certificate is included in the message. The SAML token in the request and the SOAP body in the request and response are signed with X509Token asymmetric message protection. A Timestamp is also included in the message. A SAML 2.0 token is used for authentication.

PolicyTemplateRegistry_SamlTokenWithX509SymmetricMessageProtection_Name=SamlToken with X509Token symmetric for message protection
PolicyTemplateRegistry_SamlTokenWithX509SymmetricMessageProtection_Description=A SAML token is used for authentication. The SAML token in the request and the SOAP body in the request and response are signed and encrypted with X509Token symmetric message protection. There is also a message Timestamp.  With X509Token symmetric protection, an ephemeral key is created to sign and encrypt the message. The ephemeral key is encrypted using the receiver's public certificate.  In this sample, the token reference is using a RequireThumbprintReference. You can change the policy to use a RequireIssuerSerialReference or RequireKeyIdentifierReference. You can also modify this policy to use derived keys from an ephemeral key to secure the message exchange by adding an <sp:RequireDerivedKeys /> assertion. This policy template is best used if the client can use only a SAML token to authenticate itself, and if the message exchange must be signed and encrypted.

# Pre-Wizard Error Dialog

OpenWLPSecWizardAction_Error=Error: Unable to locate the WSDL file associated with the Web Service
OpenWLPSecWizardAction_WsdlLocateErrorLine1=Unable to locate the WSDL file associated with the Web service.\n\n
OpenWLPSecWizardAction_WsdlLocateErrorLine2=Adding security policy to a Web service running on Liberty requires that the WSDL for the Web service be 
OpenWLPSecWizardAction_WsdlLocateErrorLine3=generated during the service creation process.\n\nThe WSDL file should be available under WebContent/WEB-INF or BundleContent/WEB-INF, and 
OpenWLPSecWizardAction_WsdlLocateErrorLine4=should be associated with the service through @WebService's wsdlLocation annotation value, or the Web Services Deployment Descriptor (webservices.xml). 

WLPSecurityPolicyWizard_GENERAL_INSERTION_ERROR=Unable to insert WSDL template.
WLPSecurityPolicyWizard_GENERAL_INSERTION_ERROR_DETAILED=An error occurred while inserting the policy template into the WSDL file.
WLPSecurityPolicyWizard_WizardTitle=Web Service Security Policy

# Add Security Policy - Wizard Page 1

WLPSecurityPolicyWizardPage1_Error_InvalidValuesSpecified=Invalid values specified.

WLPSecurityPolicyWizardPage1_PageDescription=Web service security policy is specified in the service WSDL for Liberty servers.
WLPSecurityPolicyWizardPage1_PolicyDescription=Description:
WLPSecurityPolicyWizardPage1_PolicyName=Policy name:
WLPSecurityPolicyWizardPage1_PolicyTemplate=Policy template:
WLPSecurityPolicyWizardPage1_Title1=Web Service Security Policy for Liberty Server
WLPSecurityPolicyWizardPage1_Title2=Web Service Security Policy for Liberty Server
WLPSecurityPolicyWizardPage1_TopText=Add a security policy entry to the Web service WSDL.


# Add Security Policy - Wizard Page 2
WLPSecurityPolicyWizardPage2_TEXT_SELECT_A_BINDING=Optionally, select one or more service bindings to which the security policy will be attached.

# Remove Wizard - Page 1
RemoveSecurityPolicyWLPWizardPage1_TEXT_SELECT_A_POLICY=Select one or more policies to remove: 
RemoveSecurityPolicyWLPWizardPage1_TABLE_POLICY=Policy
RemoveSecurityPolicyWLPWizardPage1_TABLE_POLICY_ID=Policy ID



# ibm-ws-bnd.xml dd generation
ERROR_MISSING_DEPLOYMENT_DESCRIPTOR_FOLDER_TITLE=Deployment Descriptor Folder Not Found
ERROR_MISSING_DEPLOYMENT_DESCRIPTOR_FOLDER_MESSAGE=The deployment descriptor folder {0} is not found.
ERROR_WRITING_BINDING_FILE=Error creating the ibm-ws-bnd.xml file.  Check the deployment descriptor folder.
ERROR_OPENING_BINDING_FILE=Could not open the ibm-ws-bnd.xml file.

ERR_OPEN_TITLE=An error was encountered opening the file in the editor. Check the file format.

# OSGi Support
ERROR_DIALOG_TITLE_OSGI_TOOLS=Install the OSGi Tools
ERROR_OSGI_TOOLS_NOT_INSTALLED=Cannot find the WSDL file in this OSGi Bundle because it is detected that the "OSGi Application Development Tools" are not installed.  Install this option to enable this menu.
